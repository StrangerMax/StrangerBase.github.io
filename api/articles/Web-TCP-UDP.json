{"title":"计算机网络-TCP","uid":"fc6990bffcc48d5be11a6070827fa5e5","slug":"Web-TCP-UDP","date":"2022-05-28T10:44:37.000Z","updated":"2022-05-29T13:40:46.622Z","comments":true,"path":"api/articles/Web-TCP-UDP.json","keywords":null,"cover":"http://up.36992.com/pic/e6/c5/51/e6c551e768092c8655292d89a4034a74.jpg","content":"<p><a href=\"https://blog.csdn.net/qzcsu/article/details/72861891\">本文内容参考链接</a></p>\n<h1 id=\"TCP报文内容\"><a href=\"#TCP报文内容\" class=\"headerlink\" title=\"TCP报文内容\"></a>TCP报文内容</h1><p><img src=\"/.%5CWeb-TCP-UDP%5CTCP.png\" alt=\"TCP\"></p>\n<h1 id=\"TCP-三次握手\"><a href=\"#TCP-三次握手\" class=\"headerlink\" title=\"TCP 三次握手\"></a>TCP 三次握手</h1><p><img src=\"/.%5CWeb-TCP-UDP%5CTCP-3.jpg\" alt=\"TCP-3\"></p>\n<p>三次握手过程</p>\n<ul>\n<li>客户端–发送带有 SYN 标志的数据包–⼀次握⼿–服务端</li>\n<li>服务端–发送带有 SYN&#x2F;ACK 标志的数据包–⼆次握⼿–客户端</li>\n<li>客户端–发送带有带有 ACK 标志的数据包–三次握⼿–服务端</li>\n</ul>\n<p>其中：</p>\n<ul>\n<li>SYN：<strong>同步标志</strong> 同步序列编号(Synchronize Sequence Numbers)栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端(一般是客户端)的初始序列编号。</li>\n<li>ACK：<strong>确认标志</strong> 确认编号(Acknowledgement Number)栏有效。大多数情况下该标志位是置位的。TCP报头内的确认编号栏内包含的确认编号(w+1，Figure-1)为下一个预期的序列编号，同时提示远端系统已经成功接收所有数据。</li>\n</ul>\n<h2 id=\"为什么要进行三次握手\"><a href=\"#为什么要进行三次握手\" class=\"headerlink\" title=\"为什么要进行三次握手\"></a>为什么要进行三次握手</h2><p>即为什么不能用两次握手进行连接：</p>\n<ul>\n<li>三次握手的⽬的是建⽴可靠的通信信道，通信即数据的发送与接收，⽽三次握⼿最主要的⽬的就是<strong>双方确认自己与对方的发送与接收是正常的</strong>。</li>\n<li>改成仅需要两次握手，死锁是可能发生的<ul>\n<li>考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组，会导致形成死锁。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办\"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办</h2><p>​\t\tTCP设有一个保活计时器，服务器每收到一次客户端的请求后都会重新复位这个计时器，<strong>时间通常是设置为2小时</strong>，若两小时还没有收到客户端的任何数据，服务器就会<strong>发送一个探测报文段</strong>，以后每隔<strong>75秒钟</strong>发送一次。若一<strong>连发送10个</strong>探测报文仍然没反应，服务器就认为客户端出了故障，就会关闭连接。</p>\n<h2 id=\"为什么要传回-SYN\"><a href=\"#为什么要传回-SYN\" class=\"headerlink\" title=\"为什么要传回 SYN\"></a>为什么要传回 SYN</h2><p>​\t\t接收端传回发送端所发送的 SYN 是为了告诉发送端，接收端接收到的信息确实为发送端所发送的信号。</p>\n<h2 id=\"传了-SYN-为啥还要传-ACK\"><a href=\"#传了-SYN-为啥还要传-ACK\" class=\"headerlink\" title=\"传了 SYN,为啥还要传 ACK\"></a>传了 SYN,为啥还要传 ACK</h2><p>​\t\t双⽅通信⽆误必须是两者互相发送信息都⽆误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号进行验证。</p>\n","feature":true,"text":"本文内容参考链接 TCP报文内容 TCP 三次握手 三次握手过程 客户端–发送带有 SYN 标志的数据包–⼀次握⼿–服务端 服务端–发送带有 SYN&#x2F;ACK 标志的数据包–⼆次握⼿–客户端 客户端–发送带有带有 ACK 标志的数据包–三次握⼿–服务端 其中： SYN：同...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/tags/计算机网络.json"},{"name":"TCP","slug":"TCP","count":1,"path":"api/tags/TCP.json"},{"name":"UDP","slug":"UDP","count":1,"path":"api/tags/UDP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TCP%E6%8A%A5%E6%96%87%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">TCP报文内容</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TCP-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"><span class=\"toc-text\">TCP 三次握手</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"><span class=\"toc-text\">为什么要进行三次握手</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E6%9E%9C%E5%B7%B2%E7%BB%8F%E5%BB%BA%E7%AB%8B%E4%BA%86%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%AA%81%E7%84%B6%E5%87%BA%E7%8E%B0%E6%95%85%E9%9A%9C%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E\"><span class=\"toc-text\">如果已经建立了连接，但是客户端突然出现故障了怎么办</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BC%A0%E5%9B%9E-SYN\"><span class=\"toc-text\">为什么要传回 SYN</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E4%BA%86-SYN-%E4%B8%BA%E5%95%A5%E8%BF%98%E8%A6%81%E4%BC%A0-ACK\"><span class=\"toc-text\">传了 SYN,为啥还要传 ACK</span></a></li></ol></li></ol>","author":{"name":"StrangerMax","slug":"blog-author","avatar":"https://biaoqingba.cn/wp-content/uploads/2019/10/6447a2207d34433.jpg","link":"/","description":"记录八股文及Go相关内容<br />学起来！！！！","socials":{"github":"https://github.com/StrangerMax","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43957499","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Go-Mutex","uid":"d9310819751f9d553253529bb6c0b98e","slug":"Go-Mutex","date":"2022-05-28T12:04:43.000Z","updated":"2022-05-28T12:05:24.534Z","comments":true,"path":"api/articles/Go-Mutex.json","keywords":null,"cover":null,"text":"1 ","link":"","photos":[],"count_time":{"symbolsCount":2,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Golang","slug":"Golang","count":1,"path":"api/tags/Golang.json"}],"author":{"name":"StrangerMax","slug":"blog-author","avatar":"https://biaoqingba.cn/wp-content/uploads/2019/10/6447a2207d34433.jpg","link":"/","description":"记录八股文及Go相关内容<br />学起来！！！！","socials":{"github":"https://github.com/StrangerMax","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43957499","juejin":"","customs":{}}},"feature":true},"next_post":{}}