{"title":"HTTP部分详解","uid":"7ed217c722a18d88dfada031914d1b5e","slug":"HTTP","date":"2022-06-06T06:37:20.000Z","updated":"2022-06-06T12:29:30.361Z","comments":true,"path":"api/articles/HTTP.json","keywords":null,"cover":"https://desk-fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/04/ChMkJ1d0292IRXrgAAZmbCCp91IAATGeQIo1SkABmaE420.jpg","content":"<h1 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h1><h2 id=\"HTTP是什么？\"><a href=\"#HTTP是什么？\" class=\"headerlink\" title=\"HTTP是什么？\"></a>HTTP是什么？</h2><p><img src=\"https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/3-HTTP%E4%B8%89%E9%83%A8%E5%88%86.png\" alt=\"HTTP\"></p>\n<ul>\n<li><p>HTTP是超文本传输协议，也就是<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol</p>\n</li>\n<li><p><strong>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</strong></p>\n</li>\n<li><p><strong>HTTP请求参数：</strong></p>\n<ul>\n<li>状态行(方法,url,协议版本)</li>\n<li>请求头(换行符之类的)</li>\n<li>CRLF(回车换行)</li>\n<li>请求体(请求数据)</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/f2fe2673-19a1-4482-af5f-1943ba6f824e/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45/20220606/us-west-2/s3/aws4_request&X-Amz-Date=20220606T090521Z&X-Amz-Expires=86400&X-Amz-Signature=6c5bb64abf71ee490620ac5245545e86f4b848756c7c9487574016666c9aba65&X-Amz-SignedHeaders=host&response-content-disposition=filename%20=%22Untitled.png%22&x-id=GetObject\" alt=\"http请求参数组成\"></p>\n<h2 id=\"HTTP请求方式\"><a href=\"#HTTP请求方式\" class=\"headerlink\" title=\"HTTP请求方式\"></a>HTTP请求方式</h2><ul>\n<li><strong>GET &#x2F; PUT &#x2F; POST &#x2F; DELETE &#x2F; HEAD</strong> &#x2F; OPTIONS &#x2F; TRACE &#x2F; CONECT &#x2F; PATCH</li>\n</ul>\n<h3 id=\"GET-POST区别\"><a href=\"#GET-POST区别\" class=\"headerlink\" title=\"GET-POST区别\"></a>GET-POST区别</h3><p>主要由以下几方面进行分析：</p>\n<ul>\n<li><p><strong>语义方面：</strong>语义就是协议定义的规范</p>\n<ul>\n<li><code>GET</code>请求<strong>获取资源</strong>，主要是<strong>获取资源</strong>，它需要遵从以下规范：安全的、幂等的、可缓存的</li>\n<li><code>POST</code>请求是<strong>处理资源</strong>，非安全的、非幂等的、不可缓存的</li>\n</ul>\n</li>\n<li><p><strong>安全性：</strong>指HTTP方法<strong>只要求服务器提供信息</strong>，但并不会对服务器的状态做任何修改，那么这个方法就是安全的</p>\n<ul>\n<li>安全：GET、HEAD、OPTIONS、TRACE</li>\n<li>不安全： PUT、POST、DELETE</li>\n</ul>\n</li>\n<li><p><strong>幂等性：</strong>指同一个请求方法执行一次和执行多次的效果完全相同；即<strong>相同数据</strong>多次调用的时候，<strong>不会对服务器的状态造成任何改变</strong></p>\n<ul>\n<li>所有的安全请求方法都是幂等。PUT、DELETE 虽不安全，但却是幂等的，因为它们在进行第二次调用时都不会改变服务器的状态</li>\n<li>重复的POST请求是否会改变服务器的状态是由服务器决定的，所以POST方法既不是安全的，也不是幂等的</li>\n</ul>\n</li>\n<li><p><strong>可缓存性：</strong> 指请求是否可以被缓存. 比如GET\\HEAD方法</p>\n<ul>\n<li>一般在发起一个HTTP请求过程中，它在网络中的请求链路是很复杂的，可能中间经过了网关， 代li服务器等等，然后最终传递到server端</li>\n<li>当代li服务器有缓存机制的情况下， GET请求是会被代li服务器缓存的， 这样我们在多次执行GET请求的时候， 得到的结果可能是已缓存的内容</li>\n</ul>\n</li>\n<li><p><strong>参数设置</strong></p>\n<ul>\n<li><code>GET</code>参数是有长度限制的(2048字符)，它的请求参数是以 <code>?</code> 分割拼接到URL后面；</li>\n<li><code>POST</code>参数长度是无限制的，请求参数在Body里面。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h2><p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/7c4f3938-bc01-4a8b-a8a2-aeab64bc3eef/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45/20220606/us-west-2/s3/aws4_request&X-Amz-Date=20220606T091423Z&X-Amz-Expires=86400&X-Amz-Signature=81c31adbd5d7ff8a8cede84f41256eabc77fd5a62c43d54efb2993db00ee5fa7&X-Amz-SignedHeaders=host&response-content-disposition=filename%20=%22Untitled.png%22&x-id=GetObject\" alt=\"http状态码\"></p>\n<ul>\n<li><p>1xx:信息响应类，表示接收到请求并且继续处理</p>\n</li>\n<li><p>2xx:处理成功响应类，表示动作被成功接收、理解和接受</p>\n</li>\n<li><p>3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理(在响应头里使用字段 <code>Location</code>，指明后续要跳转的URL)</p>\n</li>\n<li><p>4xx:客户端错误，客户请求包含语法错误或者是不能正确执行</p>\n</li>\n<li><p>5xx:服务端错误，服务器不能正确执行一个正确的请求</p>\n</li>\n<li><p><strong>常见错误码：</strong></p>\n<ul>\n<li>301：永久重定向 ——说明请求的资源已经不存在了，需改用新的URL再次访问</li>\n<li>302：临时重定向 ——说明请求的资源还在，但暂时需要另一个URL再次访问</li>\n<li>304：资源没修改，用之前缓存就行</li>\n<li>400：客户端请求的报文有错误</li>\n<li>403：表示服务器禁止访问资源</li>\n<li>404：表示请求的资源在服务器上不存在或未找到</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"协议方面\"><a href=\"#协议方面\" class=\"headerlink\" title=\"协议方面\"></a>协议方面</h2><p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/782c2f36-bd5d-4146-a074-399375e3a925/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45/20220606/us-west-2/s3/aws4_request&X-Amz-Date=20220606T094218Z&X-Amz-Expires=86400&X-Amz-Signature=a5c2b7829e5d03da382f56b2aef3d9aa7c10fe07e35868f299a2ab3751977ae5&X-Amz-SignedHeaders=host&response-content-disposition=filename%20=%22Untitled.png%22&x-id=GetObject\" alt=\"HTTP相关协议\"></p>\n<p>Http协议：简单的对象访问协议，对应于应用层。Http协议是基于TCP链接的。</p>\n<p>tcp协议：对应于传输层</p>\n<p>ip协议：对应与网络层</p>\n<ul>\n<li>TCP&#x2F;IP是传输层协议，主要解决数据如何在网络中传输；而Http是应用层协议，主要解决如何包装数据。</li>\n<li>Socket是对TCP&#x2F;IP协议的封装，<strong>Socket本身并不是协议</strong>，<strong>而是</strong>一个<strong>调用接口</strong>（API），通过Socket，我们才能使用TCP&#x2F;IP协议。</li>\n</ul>\n<h1 id=\"HTTP缓存技术\"><a href=\"#HTTP缓存技术\" class=\"headerlink\" title=\"HTTP缓存技术\"></a>HTTP缓存技术</h1><h1 id=\"HTTP特性\"><a href=\"#HTTP特性\" class=\"headerlink\" title=\"HTTP特性\"></a>HTTP特性</h1><h1 id=\"补充问题\"><a href=\"#补充问题\" class=\"headerlink\" title=\"补充问题\"></a>补充问题</h1><h2 id=\"访问一个URL经历过程\"><a href=\"#访问一个URL经历过程\" class=\"headerlink\" title=\"访问一个URL经历过程\"></a>访问一个URL经历过程</h2><ul>\n<li>输入网址</li>\n<li>DNS解析：依次查找对应IP<ul>\n<li>DNS（Domain Names System），域名系统，是互联网一项服务，是进行域名和与之相对应的 IP 地址进行转换的服务器</li>\n<li><strong>浏览器缓存</strong></li>\n<li><strong>操作系统缓存</strong></li>\n<li><strong>路由器缓存</strong></li>\n<li><strong>ISP本地域名服务器</strong></li>\n<li><strong>根域名服务器DNS缓存</strong></li>\n</ul>\n</li>\n<li>向服务器发送TCP请求（三次握手）</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求：处理请求、参数、cookies、生成HTML响应</li>\n<li>服务器发回一个HTML响应（报文）</li>\n<li>浏览器解析渲染页面</li>\n<li>关闭TCP连接</li>\n</ul>\n<h2 id=\"URI和URL区别\"><a href=\"#URI和URL区别\" class=\"headerlink\" title=\"URI和URL区别\"></a>URI和URL区别</h2><ul>\n<li><p><strong>URI</strong>(Uniform Resource Identifier) 是<strong>统⼀资源标志符</strong>，可以<strong>唯⼀标识</strong>⼀个资源</p>\n</li>\n<li><p><strong>URL</strong>(Uniform Resource Location) 是<strong>统⼀资源定位符</strong>，可以<strong>提供该资源的路径</strong>。它是⼀种<strong>具 体的 URI</strong>，即 URL 可以⽤来标识⼀个资源，⽽且还指明了如何 locate 这个资源。</p>\n<p>URI的作用像身份证号⼀样，URL的作⽤更像家庭住址⼀样。</p>\n</li>\n</ul>\n<h2 id=\"访问的网站是如何切到https的\"><a href=\"#访问的网站是如何切到https的\" class=\"headerlink\" title=\"访问的网站是如何切到https的\"></a>访问的网站是如何切到https的</h2><ul>\n<li>原始的302跳转，服务器把所有的HTTP流量跳转到HTTPS。但这样有一个漏洞，就是中间人可能在第一次访问站点的时候就劫持。 解决方法是引入HSTS机制，用户浏览器在访问站点的时候强制使用HTTPS。</li>\n</ul>\n<p><strong>参考：</strong></p>\n<ol>\n<li><a href=\"https://xiaolincoding.com/network/2_http/http_interview.html#http-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">小林coding</a></li>\n<li>《图解HTTP》</li>\n</ol>\n","feature":true,"text":"HTTP协议HTTP是什么？ HTTP是超文本传输协议，也就是HyperText Transfer Protocol HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。 HTTP请求参数： 状态行(方法,url,协议版...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":3,"path":"api/tags/计算机网络.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/tags/HTTP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">HTTP协议</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">HTTP是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">HTTP请求方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GET-POST%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">GET-POST区别</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E7%A0%81\"><span class=\"toc-text\">状态码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E8%AE%AE%E6%96%B9%E9%9D%A2\"><span class=\"toc-text\">协议方面</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">HTTP缓存技术</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">HTTP特性</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">补充问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%AAURL%E7%BB%8F%E5%8E%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">访问一个URL经历过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#URI%E5%92%8CURL%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">URI和URL区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E7%9A%84%E7%BD%91%E7%AB%99%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%87%E5%88%B0https%E7%9A%84\"><span class=\"toc-text\">访问的网站是如何切到https的</span></a></li></ol></li></ol>","author":{"name":"StrangerMax","slug":"blog-author","avatar":"https://biaoqingba.cn/wp-content/uploads/2019/10/6447a2207d34433.jpg","link":"/","description":"记录八股文及Go相关内容<br />学起来！！！！","socials":{"github":"https://github.com/StrangerMax","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43957499","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"计算机网络-TCP","uid":"fc6990bffcc48d5be11a6070827fa5e5","slug":"Web-TCP-UDP","date":"2022-06-05T10:44:37.000Z","updated":"2022-06-05T14:06:33.738Z","comments":true,"path":"api/articles/Web-TCP-UDP.json","keywords":null,"cover":"http://up.36992.com/pic/e6/c5/51/e6c551e768092c8655292d89a4034a74.jpg","text":"本文内容参考链接 TCP报文内容 TCP 三次握手 三次握手过程 客户端–发送带有 SYN 标志的数据包–⼀次握⼿–服务端 服务端–发送带有 SYN&#x2F;ACK 标志的数据包–⼆次握⼿–客户端 客户端–发送带有带有 ACK 标志的数据包–三次握⼿–服务端 其中： SYN：同...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"计算机网络","slug":"计算机网络","count":2,"path":"api/categories/计算机网络.json"}],"tags":[{"name":"计算机网络","slug":"计算机网络","count":3,"path":"api/tags/计算机网络.json"},{"name":"TCP","slug":"TCP","count":1,"path":"api/tags/TCP.json"},{"name":"UDP","slug":"UDP","count":1,"path":"api/tags/UDP.json"}],"author":{"name":"StrangerMax","slug":"blog-author","avatar":"https://biaoqingba.cn/wp-content/uploads/2019/10/6447a2207d34433.jpg","link":"/","description":"记录八股文及Go相关内容<br />学起来！！！！","socials":{"github":"https://github.com/StrangerMax","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/weixin_43957499","juejin":"","customs":{}}},"feature":true}}