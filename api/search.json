[{"id":"60c63987b3ca1fdd77ae38c4f1e65abe","title":"OSI七层模型","content":"OSI七层模型OSI七层模型详解\n\n简化相关网络操作\n提供不同厂商的兼容性\n促进标准化工作\n结构上进行分层，易于学习和操作\n\n分层1.物理层 ：\n2.数据链路层\n3.网络层\n4.传输层\n5.会话层\n6.表示层\n7.应用层\n物理层","slug":"Web-OSI","date":"2022-05-28T12:04:57.000Z","categories_index":"","tags_index":"计算机网络,OSI","author_index":"StrangerMax"},{"id":"d9310819751f9d553253529bb6c0b98e","title":"Go-Mutex","content":"1\n","slug":"Go-Mutex","date":"2022-05-28T12:04:43.000Z","categories_index":"","tags_index":"Golang","author_index":"StrangerMax"},{"id":"fc6990bffcc48d5be11a6070827fa5e5","title":"计算机网络-TCP","content":"本文内容参考链接\nTCP报文内容\nTCP 三次握手\n三次握手过程\n\n客户端–发送带有 SYN 标志的数据包–⼀次握⼿–服务端\n服务端–发送带有 SYN&#x2F;ACK 标志的数据包–⼆次握⼿–客户端\n客户端–发送带有带有 ACK 标志的数据包–三次握⼿–服务端\n\n其中：\n\nSYN：同步标志 同步序列编号(Synchronize Sequence Numbers)栏有效。该标志仅在三次握手建立TCP连接时有效。它提示TCP连接的服务端检查序列编号，该序列编号为TCP连接初始端(一般是客户端)的初始序列编号。\nACK：确认标志 确认编号(Acknowledgement Number)栏有效。大多数情况下该标志位是置位的。TCP报头内的确认编号栏内包含的确认编号(w+1，Figure-1)为下一个预期的序列编号，同时提示远端系统已经成功接收所有数据。\n\n为什么要进行三次握手即为什么不能用两次握手进行连接：\n\n三次握手的⽬的是建⽴可靠的通信信道，通信即数据的发送与接收，⽽三次握⼿最主要的⽬的就是双方确认自己与对方的发送与接收是正常的。\n改成仅需要两次握手，死锁是可能发生的\n考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组，会导致形成死锁。\n\n\n\n如果已经建立了连接，但是客户端突然出现故障了怎么办​\t\tTCP设有一个保活计时器，服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，就会关闭连接。\n为什么要传回 SYN​\t\t接收端传回发送端所发送的 SYN 是为了告诉发送端，接收端接收到的信息确实为发送端所发送的信号。\n传了 SYN,为啥还要传 ACK​\t\t双⽅通信⽆误必须是两者互相发送信息都⽆误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号进行验证。\n","slug":"Web-TCP-UDP","date":"2022-05-28T10:44:37.000Z","categories_index":"","tags_index":"计算机网络,TCP,UDP","author_index":"StrangerMax"},{"id":"b391db8e886fb3d55f625ef3bf7105ae","title":"golang-pre","content":"GO并发Channel待完善\n","slug":"golang-pre","date":"2022-05-27T12:58:06.000Z","categories_index":"","tags_index":"golang","author_index":"StrangerMax"}]